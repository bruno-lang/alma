
	family F1 :: (T -> T -> Bool)

	family X :: (Int[3], [T])

	family T :: _
	family E :: _

	concept Set :: = { contains }

	fn foo :: ({([T], E[*])} e -> E) = x

	op cons `+ :: ([T] l -> E e -> [T])
	
	fn div `/ :: (Int a -> Int b -> Int!)		
		= a

	data Float :: Number{-2e18..+2e18}
		
	data Time :: Natural

	data Digit :: Char{'0'..'9'}
	
	data Bool :: () { False | True }

	data Bit :: () { Zero = ^0 | One = ^1 }
	
	data Seconds :: Time

	data January :: Int = 1
	data Day :: Hours=24h
	
	concept List :: = { cons, size }	
	
	data Year :: Int & (Digit Digit Digit Digit)
	
	data Point 	:: (x: X-,y: Y-) 
	io   Point  :: (X- ':' Y-)
	
	data Points :: [Point]
	
	ratio SI :: 1h = 60min
	ratio SI :: 1min = 60sec
	ratio SI :: 1sec = 1000ms 
	ratio SI :: 2$ = 1â‚¬

	fn max :: (Int a -> Int b -> Int) =
	  a > b | a
	  _     | b
		
		
	fn quicksort :: ([T] list -> [T]) =
		list | list length <= 1  
		(less ++ same ++ more)
	:?:
		pivot = list head
        less  = list filter (pivot >) quicksort    
        same  = list filter pivot ==
        more  = list filter (pivot <) quicksort
            
	fn something :: ([T] list -> {(T, T)})
		= { a => b, 
		    c => d }

	family K :: _
	family V :: _
	fn assoc `=> :: (K key -> V value -> (K, V)) = (key, value)
		
	fn clojure :: ([T] e -> (T, T))
		= ((a b),
		   (b c),
		   (c d))
	
	fn range :: (Int low -> Int high -> [Int])
		= (`ast `range ?low ?high) 
	
	data Suit :: () { Spades | Hearts | Diamonds | Clubs }
	
	data Month :: Int{1..12} { Januar | Februar | December }
	
	data Sign :: Char{'+'|'-'}
	
	data Time :: Int
	data Days `relative :: Time 
	data DayOfMonth `absolute :: Time
	
	family E :: _

	data Elements :: (
	    length    : Length
	    elements  : E[*]*
	    tail      : [E]
	)
	
	fn at :: (Elements list -> Index i -> E?) =
	    i < list length | list at i
		_               | list tail at (i - list length)
	
	fn insert :: (Elements list -> Index i -> T e -> [E]) =
	    i == 0           | list prepand e                        
	    i == 1           | list take 1 append e ++ (list drop 1) 
	    i >= list length | (list length + 1, elements, newtail)
	    _                | (list take i) ++ (drop i prepand e)
	:?:
		newtail = tail insert at (i - list length)
	    
	family P :: (..)
	family P2 :: (.., ..)
	family A :: _
	family B :: _

	fn lazy :: ((A -> P -> B) f -> A v -> P p -> () -> B)
	    = () -> (a f p)    
        
	data Hour :: Milliseconds = 1h
	data Xyz :: Seconds = 2h + 42min
	
	family T :: _
	fn or-default :: (T? v -> T default -> T) =
	    v exists | v
        _        | default	
	    
	family T :: _ :&: eq
	fn first :: ([T] list -> T sample -> Index start -> T) =
		is-head | e
		_       | list first sample (start + 1) 
	:?:
		is-head = sample == list at start
	    
	data Coordinate :: Int & Bit[32]
	data X-Coordinate :: Coordinate
	data Y-Coordinate :: Coordinate
	data Point   :: (x: X-Coordinate, y: Y-Coordinate) 
				  & Word & Bit[64]
	io   Point   :: (X-Coordinate ':' Y-Coordinate)
	data Points  :: [Point]
	
	fn move :: (Point p -> Int dx -> Int dy -> Point)
		= (p `x + dx, p `y + dy)
	
	data Min :: Point = "2:3"
	data Max :: Point = 2:3
	
	data String :: [Char]
	data Octal :: Char[8]
	
	family G  :: _
	family T1 :: G
	family T2 :: G
	sub specialise `+> :: (T1 value -> T2)
		= (`ast `specialise ?value T2) 
	% instead of explicitly passing the target type it is used implicitly 
	through use of type families. also this illustrates well that 
	both T1 and T2 share a common generalisation G %
	
	data Bla :: String = """
	
something very long with "quotes" in it; also having empty double quotes "" 
or even source code like 

	fn foo :: (A a -> B) = a bar and also ?variables or ^constants or `atoms

    can be contained in a multiline string.
  
	"""
	
	family A :: _
	family B :: _
	family F :: (A -> P -> B)
	
	fn invoke :: (F f -> A a -> P p -> B) = a f p
	
	sub map :: ([A] l -> (A -> B) fn -> [B]) = "XXX"
	sub singleton :: (A v -> {A}) = {v}
	
	fn setify :: ([A] -> [{A}]) = (_ map singleton)
	
	family L :: *
	fn setify :: (A[L] -> {A}[L]) = (_ map singleton)
	
	data SomeTHING :: () = `some-thing
	
	fn test :: (Int i -> Int) = Math x
	
	family T :: (Name, ..)

	fn real :: (Int v -> Real)
		= 100,000.00e-34
		
	data Array2D :: Int[2][2]
	
	fn plus `+ :: (Int a -> Int b -> Int!) = (`ast `add ?a ?b)
	
	fn partially-ast-impl :: (Some a -> Thing) =
		case-a | (`ast baz)
		_      | (`ast que)
		
	family A :: 6..8
	
	data Tuple :: (one: Int[A], other: String[A])
	
	family M :: *
	family L :: 0..M

	fn fill :: (T[L] a -> T e -> T[L])
		= a fill-with-from-to 0 M
	
	family E :: _
	family A :: E[*]
	
	fn same-length-array :: (A a -> A b -> A) = ?
	
	fn rotate180 :: (Matrix* m -> Matrix)
		= m rotate90 rotate90
		
	family F1 :: (_ -> .. -> _)
	family F2 :: (_ -> _)
	family F3 :: (_ -> _ -> _)
	
	fn empty? :: (E[*] array -> Bool) = array length == 0
	
	data Pi :: Float = (:= pi-gauss-legendre 0.000001 )
	
	fn first :: = at 0
	
	fn call-side-inline :: (E[1..*] one -> E[1..*] other -> Bool)
		= one\last == other\last
		
	sub assoc `=> :: (K key -> V value -> (K, V)) = (key, value)
	
	family E :: _
	fn at :: (E[{*}] s -> Index i -> Int) = (`ast `get ?s ?i)
	
	% keys %
	
	family V :: _
	fn get :: (T obj -> @V key -> V?) = @akey-in-action-but-impl-doesn't-make-sense
	
	fn put :: (T obj -> @V key -> V value -> T) = ?
	
	fn canonical-name :: (@V key -> String) = ?
	
	fn on-channel :: (Int[>] chan -> Int[>]) = ?
		
	fn yields-channel :: (@T[>] key -> T[>]) = ?

	% == [ Processes & Channels ]== %

	% blocking, non blocking and unknown output %
	family O1 :: _[>]
	family O2 :: _]>[
	family O3 :: _]>]
	
	% blocking, non blocking and unknown input %
	family I1 :: _[<]
	family I2 :: _]<[
	family I3 :: _]<]
	
	% processes %
	data Server :: Process 
		{ Ready              = [ Ready ] 
		| Out-Of-Heap-Space! = []
		}	
	
	% single process %
	when Ready :: (HttpServer server -> HttpServer)
		1. server responds >> (server process (server requests <<))
		.. Ready: server	

	% single process with where %		
	when Ready :: (HttpServer server -> HttpServer)
		1. server responds >> response
		.. Ready: server
	:?:
		response = server process request
		request  = server requests <<
		
	% parallel with ad-hoc helper processes %
	when Ready :: (HttpServer server -> HttpServer)
		1. server respond! (server requests <<)
		.. Ready: server 

	fn respond! :: (HttpServer server -> Request request -> ())
		=< server responds send! (server process request)	
		
	% parallel with process "pool" %
	when Ready :: (HttpServer server -> HttpServer)
		1. idle-worker-input >> (server requests <<)
		.. Ready: server
	:?: 
		idle-worker-input: HttpRequest[>] = @pool receive-queue <<	

	when Idle :: (Worker worker -> Worker)
		1. Work: worker responds >> (worker process (worker requests <<))
		2. Register: @pool send-queue >> (worker requests key)
		.. Idle: worker
		
	when Out-Of-Memory! :: (Worker worker -> Worker?)
		..		
		
	% working with channels %
	
	fn broadcast :: (T value -> [T]>]] channels -> ())
		= foreach (channel >> value)
	:?:
		channel: T]>] = each channel	
		
	sub send? `>|> :: (T value -> T[>] channel -> Milliseconds timeout -> T[>])
		= res
		:?:
		  res
			|= value >> channel
			|= value >> (timeout make-channel) than-return channel
		
		
	fn example :: (T[>][3] channels -> T) = value
	:?: 
		value 
			|= channels at 0 <<
			|= channels at 1 <<
			|= channels at 2 <<	
	
	fn example2 :: (Int[>] channel -> Int) = res
	:?:
		res
			|= channel <<
			|= 7 after 6ms 
			
	fn example3 :: (Int[>] channel -> Int) = res
	:?:
		res
			|= channel <<
			|= 2
		
	fn numbers! :: (Foo f -> Bar)
		= [1/2 1.2/4]
		
	fn force-plus `+! :: (Int! a -> Int b -> Int!)
		= (`ast (`add ?a ?b))
		
	% Shapes %
	
	fn shapes :: ([] -> {})         = "example"
	fn shapes :: ("" -> String)     = "another example"
	fn shapes :: (`foo x -> String) = "another example"
	fn shapes :: (@foo x -> String) = "another example"

	family A :: (`ast , ..)

	% testing some things... %
	
	when Greet :: (Char[>] out -> ())
		1. out print "Hello World"
		.. 	
		
	% Concepts (again) %
	
	family X :: _ :&: eq, compare
	
	family S :: [E] = Stack E :&: at
	
	concept Stack E :: = { push, pop }
	family S2 :: _ = Stack E, Collection E
	
	
	family T :: (..)
	family F :: (_ -> .. -> _)
	family A :: _[*]
	family V :: _[{*}]
	family L :: [_]
	family S :: {_}
	family D :: *
	family D2 :: 42
	family D3 :: 0..42
	family D4 :: 42..*
	family D5 :: *..42
	family D6 :: 0..D
	family D7 :: D..D2
	family S1 :: 1, 3, 5..*
	
	family R :: _[<]
	family W :: _[>]
	family M :: _[!*]
	
	family M :: _?
	family E :: _!
	family P :: _*
	
	family K :: @_	
	family I :: #_
	
	family E :: _ = Stack, Collection
	family F :: _ = Stack :&: plus

	family E`ven :: Int{0,2,4..*}
	family O`dd  :: Int{1,3,5..*}
	
	fn contains :: (Char[*] arr -> Char sample -> Bool)
		= arr index-of (sample, 0 \(eq => equals-ignore-case)) exists?
		
	data Point   :: (x: Coordinate, y: Coordinate) 
	              & (Coordinate; Coordinate)
	io Point     :: (Coordinate ':' Coordinate)
	            
	data Minutes   :: Time 
	io   Minutes   :: (Digits 'min')
	
	data Era :: Date = 1970-01-01
	
	family S1 :: _[{*}]
	family S2 :: _[{2}]
	family S3 :: _[{2..4}]
	
	family L :: *
	family E :: _
	fn stretch :: (E[{*}]  slice -> Int{L} length -> E[{L}]) = ?
	fn slice   :: (E[L..*] array -> Int{L} length -> E[{L}]) = ?
	fn slice   :: (E[L..*] array -> Int{L} length -> Int{0..*} start -> E[{L}]) = ?
	
	data Time `dimension :: Int{0..*}
	
	data Minutes `unit   :: Time 
	io   Minutes         :: (Digits "min")
	
	data Seconds `unit   :: Time 
	io   Seconds         :: (Digits "sec")

	data Planet :: (weight: Kilograms, radius: Meters) 
		{  Mercury = (3.303e+23kg, 2.4397e6m)
		|  Venus   = (4.869e+24kg, 6.0518e6m)
		|  Earth   = (5.976e+24kg, 6.37814e6m)
		|  Mars    = (6.421e+23kg, 3.3972e6m)
		|  Jupiter = (1.9e+27kg,   7.1492e7m)
		|  Saturn  = (5.688e+26kg, 6.0268e7m)
		|  Uranus  = (8.686e+25kg, 2.5559e7m)
		|  Neptune = (1.024e+26kg, 2.4746e7m) 
		}
	
	family T4 :: (E, ~)	
	
	data Exp :: Int = 2^27 - 1
	
	% bootstrapping the basic types %

	data Bit   :: ()  { ^0 | ^1 }
	data S-Bit :: Bit { ^+ | ^- }
	data M-Bit :: Bit

	data Word  :: Bit[1..64] % that means a Word is 64 bit on low level %

	data Byte  :: Word & M-Bit[8]
	
	data Num   :: Word
	data Int   :: Num  & (S-Bit Bit[1..31])
	data Long  :: Num  & (S-Bit Bit[32..63])

	data Coefficient :: Long & Bit[56] & (S-Bit M-Bit[55])
	data Exponent    :: Int  & Byte
	data Dec         :: Num & (Coefficient Exponent)

	data Numerator   :: Int  & Bit[32] & (S-Bit M-Bit[31])
	data Denominator :: Int  & M-Bit[32]
	data Frac        :: Num & (Numerator Denominator)
	
	data Next        :: Byte & (^1 MBit[7])
	data Null        :: Byte & (^0 MBit[7])
	data CharCode    :: Byte[1..4] & (Next[0..3] Null)
	data String      :: Byte[0..*] & CharCode[0..*]

	data Char        :: Int{0..0xFFFF} & M-Bit[32]

	data Text        :: String	
	
	fn signum :: (Relation v -> Int) =
		v == Less | -1
		v == More | 1
		_         | 0
	
	family B :: Bool
	fn or `|| :: (B a -> B b -> B) = (`ast `or ?a ?b)
		
	data ADT :: Byte[*] & (Ok, Data)+(Error, Text)
	data ADT :: Byte[*] & (status:Ok, data:Page)+(status:Error, Text)

	data ADT :: Byte[*] & 
		+(Ok, Data)
		+(Error, Text)

	data ADT :: Byte[*] & 
		+(status:Ok, Data)
		+(status:Error, Text)
		
	def Math :: = (`module `Math )	
	
	data Unit  :: ~ 
	io   Unit  :: "()"
	
	fn show :: (True t -> String) = "true"
	fn show :: (False f -> String) = "false"
	
	fn switch :: (Weekday d -> String) =
		d == _  |   ?
		%------------------%
		Monday  | "Monday"  
		Tuesday | "Tuesday"
		
	fn another :: ([Int] n -> Int idx -> Int) =
		   n == _ |   ?
		a. []     | 0
		b. [1]    | 1
		c. _      | n at idx
		
	fn x-or-y :: (Point p -> Int) =

		x == _ | y == _ | ?
		%-----[sample 1]----%
		  1    |   2    | x
		%-----[sample 2]----%
		  0    |   4    | x
		  _    |  _     | y

	:?: 
		x = p x
		y = p y		
		
		
	data Server :: Process 
		{ Ready = [ Ready ] 
		| Out-Of-Heap-Space! = [] }

	% nonsense %
	data True  :: ()
	data False :: ()
	data Bool  :: () = { False , True }
	
	data Menu :: Meal[Weekday]
	data Menu :: Food[Weekday] = [ "Pasta", "Pizza" ]
	data Menu :: Food[Weekday] = { Monday => "Pasta", Tuesday => "Pizza" }
	
	data ASCII :: Int{0..127} & Byte & (^0 Bit[7]) &
		+ControlCodes
		+Digits
		+UpperLetters
		+LowerLetters
		+Symbols

	data ControlCodes :: Int{0..31|127}
	data Digits       :: Int{48..57}
	data UpperLetters :: Int{65..90}
	data LowerLetters :: Int{97..122}
	data Symbols      :: Int{32..47|58..64|91..96|123..125}	
	
	data ASCII :: Int{0..127} & Byte & (^0 Bit[7])
		{ ControlCodes : Int{0..31|127}
		| Digits       : Int{48..57}
		| UpperLetters : Int{65..90}
		| LowerLetters : Int{97..122}
		| Symbols      : Int{32..47|58..64|91..96|123..125}
		}
		
	data ASCII :: Int{0..127} & Byte & (^0 Bit[7]) { 
		ControlCodes : Int{0..31|127} | 
		Digits       : Int{48..57}    | 
		UpperLetters : Int{65..90}    | 
		LowerLetters : Int{97..122}   | 
		Symbols      : Int{32..47|58..64|91..96|123..125}
	}
	
	data Const :: Int = 1,000,000.000
	
	data Process :: #[~]
		{ Out-Of-Data-Space! = ?
		| Out-Of-Code-Space! = ?
		| Out-Of-Call-Space! = ?
		| Out-Of-Type-Range! = ?
		| Out-Of-Disk-Space! = ?
		| Memory-Port-Error! = ?
		}
		
	data Server :: Process
		{ Out-Of-Data-Space! = []
		| Ready              = [ Ready ]
		}
		
	data XProcess :: Process
		{ ..
		| Out-Of-Data-Space! = [ Cleanup! ]
		| Out-Of-Code-Space! = [ Cleanup! ]
		| Out-Of-Call-Space! = [ Cleanup! ]
		| Out-Of-Type-Range! = [ Cleanup! ]
		| Out-Of-Disk-Space! = [ Cleanup! ]
		| Cleanup!           = ?
		}
		
	data Deamon :: Process
		{ ..
		| Out-Of-Data-Space! = []
		| Out-Of-Code-Space! = []
		| Out-Of-Call-Space! = []
		| Out-Of-Type-Range! = []
		| Out-Of-Disk-Space! = []
		}
		
	data I-Do-Not-Know :: Int = ?
	
	data Bool :: #() { True | False }
	
	data Atom :: #Text
	io   Atom :: ('`' Text)
	
	family L`ist :: [E]
	
	family E :: _
	family L :: [E]
	
	op cons   :: (L -> E e -> L)
	op append :: (L -> E e -> L)
	op concat :: (L -> L other -> L)
	op take   :: (L -> Count c -> L)
	op drop   :: (L -> Count c -> L)
	op remove :: (L -> Index i -> L)
	op insert :: (L -> Index i -> L)
	op at     :: (L -> Index i -> E?)
	op slice  :: (L -> Index from -> Index to -> L)
	
	concept List :: = { force, cons, append, concat, take, 
	                    drop, remove, insert, at, slice }

	family A`ny :: _
	op force :: (A -> A)

	                                    
	on Alarm :: (Machine m -> Machine)
		1. notify master-control || something else
		.. Recover: m
		
	fn manual :: (Byte[!1024] mem -> X) = ? 
	
	fn map :: ([A] l -> (A -> B) a-a' -> B) = ( {}, [], () )

	% the point of the next example is to show how one could disallow 
	  specialisation for a nominal type to make sure it is only manipulated via
      function on that type that do ensure certain consistency constriants. 

		`fresh means not "inherit" function from [E] (but can be used in impl)
		`sealed means that it is not allowed to specialise to this type
	%
	family E :: _ :&: eq
	data RecentlyUsedList `fresh `sealed :: [E]

	fn add :: (RecentlyUsedList l -> E e -> RecentlyUsedList) 
		= l remove e insert-at 0 e
	
	fn get :: (RecentlyUsedList l -> Index i -> E)
		= l at (l length - i - 1)

	% It would be nicer to be able to use [E] as type with some attributes 
	  attachted to it that are consistency constriants.
	  In general we want to attach properties to types that have been proven
	  to hold for the value in question. 
	%

	% but by just using a family for the list type it gets more readable %
	family L :: RecentlyUsedList

	fn add :: (L l -> E e -> L) 
		= l remove e insert-at 0 e
	
	fn get :: (L l -> Index i -> E)
		= l at (l length - i - 1)

	% _________________________________________________________________________

					the reconception of data conversion errors 

		a) potential error are indicated by an error type variant: Int => Int!
		b) a actual problem returns the "virtual constant": Error!
		c) the caller raises an errorous value to a "exception" or continues 
		   in some other way
	%

	family I :: Int
	sub div `/ :: (I a -> I b -> I!) = (`ast `/ ?a ?b)

	family T :: _
	sub or-else :: (T! v -> T default -> T) =
		v == Error! | default
		_           | v

	sub or-raise :: (T! v -> T) =
		v == Error! | Out-Of-Type-Range!
		_           | v

	fn example1 :: (Int a -> Int) = 10 / a or-else 0
	fn example2 :: (Int a -> Int) = 10 / a or-raise

	% make it a bit nicer ...%
	sub is-error? :: (T! v -> Bool) = v == Error!
	sub or-raise  :: (T! v -> T) = 
		v is-error? | Out-Of-Type-Range!
		_           | v

	% note that "raising" an error is simply done by returning it instead of
	  an actual value. No need for special synatx - the compiler will understand
	  this.
	%

	data FizzBuzzed :: #() { Fizz | Buzz | FizzBuzz | Number }

	fn fizz-buzz :: (Int n -> FizzBuzzed) = 
		n mod 15 | FizzBuzz
		n mod 3  | Fizz
		n mod 5  | Buzz
		_        | Number

	fn fizz-buzz :: (Int n -> FizzBuzzed) =
		n mod _  | ?
		%-------------------%
		15       | FizzBuzz
		3		 | Fizz
		5		 | Buzz
		_        | Number



	%______________________________________________________________________

							How to do "classes"
	%

	data Object  :: (Type, ..)
	data Integer :: Object & ($Int, Int)

	% or more complex with boxing as a general concept %
	family U   :: Word
	data Boxed :: Object & (type: $U, value: U)
	family B   :: Boxed
	fn box     :: (U val -> B) = (U, val)
	fn unbox   :: (B obj -> U) = obj value

	data Integer :: Boxed{Int}	
	% note that Int is one of the possible values of the type variable U used in
	  Boxed declaration, like a primitive the set of all Boxed types is reduced
	  to just the one where U is Int %


	%______________________________________________________________________

							What is a "Type"?
		a data structure...
	%

	data Type :: (Kind, Name, components: [Type], [Dimensions], <Variant)
	data Kind :: #() { ProductType | SumType | OrdinalType | ArrayType | ListType | SetType 
			   | TupleType | FnType | RangeType | ScalarType | KeyOf | TypeOf 
			   | Self | AnyType | LiteralShape | AtomShape | KeyShape }

