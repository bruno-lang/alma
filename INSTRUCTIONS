2017-04-21	The hopefully final redesign of a parser instruction language

Directly instructing a general parser machine that builds an annotated parse tree
from an input file written in a syntax that conforms to the instructions used to 
parse it (or an error is raised).

Principles:
- all input, including whitespace, has to be parsed

Instructions Overview
---------------------
Marker : $
Surface: ,;.:\!-*+?0-9(|)~<>"/_'#
Names: a-zA-Z_
Sugar: []{}%
Internal: ^&@

ASCII control codes are internal instructions that an implementation might substitute during compile phase for any combination or pattern to optimize special cases.
A common use is to use all control codes (and the range 128-255) to encode references to the block with the code number within the internal program representation.  

Whitespace
----------

, gap  (may be spaces or tabs)
; gap! (must be spaces or tabs)
. ws   (may be any ASCII whitespace)
: ws!  (must be any ASCII whitespace)
\ nl   (a single new line, might be CR-NL or just NL)
! nl!  (must be a at least a new line)

Block Occurrence
----------------
- max  (only affect max in current block)
* x0-n
+ x1-n
? x0-1
0 x0
1 x1
2 x2
3 x3
4 x4
5 x5
6 x6
7 x7
8 x8
9 x9

If multiple x0-x9 instruction directly follow each other they are 
understood as the decimal number they form as it does not make sense
to set min/max to one number and then directly to another.
These can be replaced with the internal instruction ^ that is followed by 
a byte stating the number of repetitions in range 0-255. 
Higher limits must be enforced beyond a parsing level. 

Blocks
------
( call
) back
| else

~ fill
< lock
> head

Character Sets
--------------
" set  "...", e.g. "abc" is a set of letters a,b and c
/ rset /min max/, e.g. /10 20/ is a set of ASCII symbols with code 10 to 20
_ any  (accepts any input byte)
# digits 0-9 (same as "0123456789")
TODO any non ascii input byte (binary 1xxxxxxx) or more general masking

Sets can be replaced with the internal instruction & that is followed by
16 bytes mask having all bits set that are in the set in ASCII range.
  

Literals
--------
' lit  '...', e.g. 'abc' is literally the sequence of the letters a,b and c


Names and References
--------------------
Names can contain letters, digits and the symbols #,$,- and _ 
but they have to start and end with a letter or # or $.

= name (names a position; names starting with an lower case letter captured in the parse tree.)

Any name starting character is a reference to a named position.
A jump to a named position is similar to entering a block. 

Named calls to blocks can be replaced with internal instruction @ followed by the position or index of the block/code to enter.


Syntactic Sugar
---------------
Whitespace (here shown as ␣) is a no-op; it is used to mark use of syntactic sugar.
Syntactic sugar is substituted in the below order. 
This is important to not change the semantics of the original program.  

0. strip comments
%...%        ⇢ ␣
%...\n       ⇢ ␣

1. wrap dangling repetitions in a block [remember later ) as "last space"] 
␣...?␣              ⇢ (?...)
␣...*␣              ⇢ (*...)
␣...+␣              ⇢ (+...)
␣...n-m␣          ⇢ (n-m...)
␣...{n-m}␣      ⇢ (n-m...)
␣...5␣              ⇢ (5...)
␣...5+␣            ⇢ (5+...)

2. move dangling block repetitions into blocks
(...)*␣            ⇢ (*...)
(...)?␣            ⇢ (?...)
[...]        ⇢ (?...)

3. move naming into blocks
name␣=␣...\n ⇢  (=name␣...)
name␣=␣{...} ⇢  (=name␣...)

$ a marker byte - if 1. byte in file is marker the src is already de-sugared.

Internalisation
----------------
Is the process of replacing some instructions with instructions not available to the user.
The use instruction codes reserved for internal usage.
Those are often followed by binary argument bytes (what is why they are not available to users).

Multi-digit counts to binary encoded ones
...nm  ⇢ ^c
...34 ⇢ ^c

Sets to bitmasks
"..." ⇢ &xxxxxxxxxxxxxxxx
/.../ ⇢ &xxxxxxxxxxxxxxxx

Named references to indexed references
name  ⇢ @n

Argumentation
-------------
Is the process of adding argument bytes to some instructions in order to improve execution performance.

Length encoded block cases (l=length 0-255) 
(...  ⇢ (l...
here the length is the number of bytes to the closing ) or the following |

Capture by pre-indexed names (equally to references by index)
=name ⇢ =n

Comments
--------

% nb   (NB, a comment until the end of the line or next % in same line)


Design Decisions
----------------
* Multiple captures within a block do nest. 
  This is more naturally implemented as there is only 1 capture per block per level.

