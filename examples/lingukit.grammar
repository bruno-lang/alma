grammar       : member (, member)*
member        : comment | rule
comment       : '%' (-{\n}+):text
rule          : name, ('=' | (':' ':'? '='?)), selection .
selection     : sequence (, '|' > sequence )*
sequence      : element ( > element )*
element       : (decision | completion | group | option | lookahead | string | terminal | ref ) occurrence?
decision      : '!'
completion    : '..' capture
group         : '(', selection, ')' capture
option        : '[', selection, ']' capture
lookahead     : '~('!, selection, ')'

occurrence    : qmark | plus | (('x' | '**') quantity | element) | star
quantity      : num:min ('..' | {'-' '+'}):to? num:max?
num           : 9+
qmark         : '?'
star          : '*'
plus          : '+'

ref           : name capture
name          : '-'? '\'? {'A'-'Y' 'a'-'y'} {@ 9 '_' '-'}*
capture       : [':' name:alias ]

string        : ''' -{'''}**2+ '''

terminal      : pattern | ranges | figures
pattern       : gap | pad | indent | separator | wrap
figures       : not? '{', -figure (, -figure )* '}' capture
figure        : ranges | name

wildcard      : '$'
symbol        : ''' $ ''' | '"' $ '"' 
code-point    : 'U+' #x4-8
literal       : code-point | symbol
range         : literal, '-', literal
category      : 'U+{' @+ '}'
ranges        : wildcard | letter | upper | lower | digit | hex | octal | binary | category | range | literal | whitespace | shortname

letter        : '@'
upper         : 'Z'
lower         : 'z'
digit         : '9'
hex           : '#'
octal         : '7'
binary        : '1'
not           : '-'
whitespace    : '_'
gap           : ','
pad           : ';'
wrap          : '.'
indent        : '>'
separator     : '>>'

shortname     : tab | lf | cr
tab           : '\t'
lf            : '\n'
cr            : '\r'