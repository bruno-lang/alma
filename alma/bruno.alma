% bruno (alma version) %

% Type Variant Symbols %
-KeyOf        = '@'
-Optional     = '?'
-Faulty       = '!'
-Transient    = '*'
-Self         = '~'
-Wildcard     = '_'
-Open         = '?'

% Identifiers %
-Atom         = '`' \s^+
-Key          = \KeyOf [Zs ',']^ [s ',{}()[]']^*
-Variable     = '?' [zZ9 '-_' ]+
-TypeVariable = \Z \9?
-Noun         = \Z [zZ '-']+ [zZ9 '!']* | '^' ['+-'9] \9*
-Verb         = \z [z9 '-']* [z9]? ['?!' \apostrophe]?
-name         = Key | Noun

% Operators %
-Op           = ['+/*=><&-']
-Operator     = \Op [\Op '!?|']{0-2} | [\Op '|']{2-3}

% Literals %
-Literal      = [s'?#"=><&|)].,;*\}']^
-numeric      = ['+-']? \9+ (['.,'] \9+)*
-quoted       = '"""' < .  ~@TEXT (. '"""') | '"' < ['"']^*@TEXT '"' | \apostrophe < \apostrophe^*@TEXT \apostrophe
-literal      = quoted | numeric (numeric | Literal)*

% Types %
-variant      = [\Faulty \Optional \Transient]

-dimension    = manualType | sliceType | channelType | arrayType
-manualType   = '[!' < scalarType ']'
-sliceType    = '[<' \lengthType < '>]'
-channelType  = ['[]'] ['<>']{1-2} < ['[]']
-arrayType    = '[' Noun ']' | '[' < \lengthType ']'
-lengthType   = spanType | scalarType
-spanType     = scalarType@MIN '-' scalarType@MAX
-scalarType   = \9+ | '*' | TypeVariable

-subrange     = '{' < subrangeType ('|' subrangeType)* '}'
-subrangeType = (valueType@MIN)? ('..' (valueType@MAX)?)?
-valueType    = literal | scalarType

-type         = shape | \complexType
-complexType  = sumType ( . '&' . sumType)*
-sumType      = (. '+' ,)? fullType (. '+' , fullType)*
-fullType     = \KeyOf? \kind dimension* variant?
-kind         = Wildcard  | ordinalType | listType   | setType | fnType
              | tupleType | namedType   | lengthType | TypeVariable
-namedType    = Noun subrange?
-ordinalType  = '#' < \complexType
-listType     = '[' < type ']'
-setType      = '{' < type '}'
-fnType       = '(->)'
              | '(' type@INSTANCE , '->' < ( , type , '->' )* , type@RETURN ')'
-tupleType    = '()' | '(,)' | '(' field (['\;,']@X? , field )* ')'
-field        = label? ('..' | type) ,
-label        = . Verb ':' ,

-shape        = Self | '[]' | '{}' | '()' | '""' | Atom | Key | literal

% /////////////////////////////////////////////////////////////////////////////%

% Modularisation %
-file         = module | library
-library      = form
-module       = ( . \declaration)+ .
-declaration  = def | data    | when  | fn    | family
              | op  | concept | fault | ratio | comment
-attrs        = (Atom ; )* 

-fault        = 'fault' < ; Noun , '::' . namedType !

% Data %
-ratio        = 'ratio' < ; Noun , '::' . literal , '=' , literal !
-data         = 'data' < ; \name , '::' . attrs type enumeration? with* init? !
-with         = . 'with' < ; ('"' Noun '"' | Noun '[]' ) , '::' . type
-enumeration  = . '{' < . constants . '}'
-constants    = constant ( . '|' < . constant )*
-constant     = '..' | \name ( . ':' < , type)? init?
-init         = . '=' < . (Open | expr)

% Functions %
-fn           = ('fn' | 'sub' )< ;  \operational , '::' . inout? . '=' . impl
-inout        = \descriptor | '(' < , \descriptor , ')'
-descriptor   = ( param , '->' , )+ type
-param        = type ; Verb@NAME?
-impl         = case | Open !
-case         = , where | (, [z '?']'.')? , (expr condition? | condition) ! case?
-condition    = ( , '|' , expr)+
-where        = 'where' < . variable , (variable , )*
-variable     = Verb@NAME (, ':' , type)? , (select | '=' , expr !)
-select       = ( . '|=' < , expr ! )+

% Expressions %
-seq          = . expr ( . ',' ? . expr )* .
-expr         = form ( , form )*
-form         = expand | tuple | list | set | comment | implicit | inline | \term
-inline       = '\' Verb@FUNCTION
-expand       =      '(:=' < \seq ')'
-implicit     =       '\(' < \seq ')'
-tuple        = '()' | '(' < \seq ')'
-list         = '[]' | '[' < \seq ']'
-set          = '{}' | '{' < \seq '}'
-comment      = '%' ~ '%'
-term         = Wildcard | Atom     | Key  | literal 
              | Variable | Operator | Verb | Noun | TypeVariable

% Abstract Data Types %
-op           = 'op'      < ; \operational ,  '::' . Verb? . inout
-concept      = 'concept' < ; \parametrised , '::' . '=' , '{' . Verb . (',' . Verb .)* '}'
-family       = 'family'  < ; TypeVariable , attrs '::' . type as? with_ops?
-as           = . 'as' , \parametrised ( , ',' , \parametrised)*
-with_ops     = . 'with' , Verb@OP ( , ',' , Verb@OP)*
-parametrised = Noun (; TypeVariable)*
-operational  = Verb , ('`' Operator '`')?

% Processes %
-when         = ('when' | 'on') < ; Noun , '::' . inout . (effect !)* . then . where?
-effect       = \9'.' < (; Noun , ':')? ; expr
-then         = '..' . ((transition !)* | !)
-transition   = , Noun , ':' . expr condition?

% Definitions %
-def          = 'def' < ; name , '::' , '=' . expr !